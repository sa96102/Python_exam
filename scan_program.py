# -*- coding: utf-8 -*-
"""Scan Program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1835UQZRQNPwFusV_YBX8-aiXkWOfZRhT

#Use OpenCV
"""

# from google.colab import drive 

# drive.mount('/content/gdrive/')

import cv2, os
import numpy as np

img_path = './img/a-room-for-young-people-4815340_1920.jpg' # 원본 이미지 경로.
filename, ext = os.path.splitext(os.path.basename(img_path))
ori_img = cv2.imread(img_path)

src = [] # 왼쪽 위, 오른쪽 위, 오른쪽 아래, 왼쪽 아래 순서로 각 점의 x,y 좌표를 넣을 전역변수.

def mouse_handler(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONUP: # 왼쪽 마우스 버튼을 누르고 뗐을 때의 이벤트.
        img = ori_img.copy()

        src.append([x, y]) # x, y 좌표를 src 전역변수에 저장.

        for xx, yy in src:
            cv2.circle(img, center=(xx, yy), radius = 5, color = (0, 255, 0), thickness = -1, lineType = cv2.LINE_AA) # 클릭할 때 해당 위치에 초록색 점을 생성.

        cv2.imshow('img', img)

        # perspective transform (입력으로 4개, 출력으로 4개의 점이 필요. -> 점을 매칭.)
        if len(src) == 4: # 점이 총 4개가 맞는지 체크.
            src_np = np.array(src, dtype=np.float32)

            # 만들어낸 이미지의 가로, 세로 길이 계산.(가장 길게 설정된 축을 사용.)
            width = max(np.linalg.norm(src_np[0] - src_np[1]), np.linalg.norm(src_np[2] - src_np[3]))
            height = max(np.linalg.norm(src_np[0] - src_np[3]), np.linalg.norm(src_np[1] - src_np[2]))
			# numpy.linalg.norm(a - b) : a점과 b점 사이의 거리를 구함.

            dst_np = np.array([
              [0, 0], # 왼쪽 위.
              [width, 0], # 오른쪽 위.
              [width, height], #오른쪽 아래.
              [0, height] # 왼쪽 아래.
            ], dtype = np.float32)

            M = cv2.getPerspectiveTransform(src=src_np, dst=dst_np)
            result = cv2.warpPerspective(ori_img, M=M, dsize=(width, height)) # 이미지를 변형.

            cv2.imshow('result', result)
            cv2.imwrite('./result/%s_result%s' % (filename, ext), result)

cv2.namedWindow('img') # 윈도우에 'img'라고 이름을 지정.
cv2.setMouseCallback('img', mouse_handler) # img윈도우에 mouse_handler함수를 콜백으로 등록.

cv2.imshow('img', ori_img)
cv2.waitKey(0)
